from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import json
import os
from datetime import datetime, timedelta
import asyncio
import nest_asyncio

DATA_FILE = 'habit_data.json'
REMINDERS_FILE = 'reminders.json'

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_data(user_id):
    data = load_data()
    return data.get(str(user_id), {})

def update_user_data(user_id, user_data):
    data = load_data()
    data[str(user_id)] = user_data
    save_data(data)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def load_reminders():
    if not os.path.exists(REMINDERS_FILE):
        return {}
    with open(REMINDERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_reminders(reminders):
    with open(REMINDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/habits ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/done <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/status ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/reset <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/remind HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /remind 08:00)"
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ—Å–ª–µ /add")
        return

    habit_name = ' '.join(context.args).strip().lower()
    if habit_name in user_data:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –µ—Å—Ç—å.")
        return

    user_data[habit_name] = {"streak": 0, "last_done": ""}
    update_user_data(user_id, user_data)
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("‚ùó –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add")
        return
    msg = '\n'.join([f"‚Ä¢ {h}" for h in user_data.keys()])
    await update.message.reply_text(f"üìã –¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{msg}")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏–≤—ã—á–∫—É –ø–æ—Å–ª–µ /done")
        return

    habit_name = ' '.join(context.args).strip().lower()
    if habit_name not in user_data:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ—Ç.")
        return

    today = datetime.now().strftime('%Y-%m-%d')
    last_done = user_data[habit_name]['last_done']

    if last_done == today:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è.")
        return

    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    user_data[habit_name]['streak'] = (
        user_data[habit_name]['streak'] + 1 if last_done == yesterday else 1
    )
    user_data[habit_name]['last_done'] = today
    update_user_data(user_id, user_data)

    await update.message.reply_text(
        f"üéâ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\nüî• –°—Ç—Ä–∏–∫: {user_data[habit_name]['streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await update.message.reply_text("‚ùó –î–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ /add")
        return

    msg = "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
    for habit, info in user_data.items():
        msg += f"‚Ä¢ {habit}: {info['streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
    await update.message.reply_text(msg)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        return

    habit_name = ' '.join(context.args).strip().lower()
    if habit_name not in user_data:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ—Ç.")
        return

    user_data[habit_name] = {"streak": 0, "last_done": ""}
    update_user_data(user_id, user_data)
    await update.message.reply_text(f"üîÑ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —Å–±—Ä–æ—à–µ–Ω–∞.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)

    if not context.args:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /remind 08:00")
        return

    try:
        hour, minute = map(int, context.args[0].split(':'))
        reminders = load_reminders()
        reminders[user_id] = f"{hour:02}:{minute:02}"
        save_reminders(reminders)
        await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02}:{minute:02}")
    except:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–∏—à–∏ –≤–æ—Ç —Ç–∞–∫: /remind 08:00")

# –¶–∏–∫–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminders(app):
    while True:
        now = datetime.now().strftime("%H:%M")
        reminders = load_reminders()
        for user_id, time_str in reminders.items():
            if time_str == now:
                try:
                    await app.bot.send_message(chat_id=int(user_id), text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É!")
                except Exception:
                    pass
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token("7697417191:AAGwE5yjwbXu6PiRgvD1OCiNqeQElZUo9_8").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("habits", habits))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("remind", remind))

    asyncio.create_task(send_reminders(app))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())


